__author__ = 'laeb'

from Bio.Data.CodonTable import unambiguous_dna_by_name

dna = ["A","T","G","G","T","G","A","A","C","T","C","C","T","C","T","G","C","T","T","C","A","G","C","A","G","A","T","A","A","G","C","C","A","T","T","A","T","C","C","A","A","C","A","T","G","A","A","G","A","T","C","C","T","G","A","C","T","C","T","C","G","G","G","A","A","G","C","T","G","T","C","C","C","G","G","A","A","C","A","A","G","G","A","T","G","A","A","G","T","G","A","A","G","G","C","C","A","T","G","A","T","T","G","A","G","A","A","A","C","T","C","G","G","G","G","G","G","A","A","G","T","T","G","A","C","G","G","G","G","A","C","G","G","C","C","A","A","C","A","A","G","G","C","T","T","C","C","C","T","G","T","G","C","A","T","C","A","G","C","A","C","C","A","A","A","A","A","G","G","A","G","G","T","G","G","A","A","A","A","G","A","T","G","A","A","T","A","A","G","A","A","G","A","T","G","G","A","G","G","A","A","G","T","A","A","A","G","G","A","A","G","C","C","A","A","C","A","T","C","C","G","A","G","T","T","G","T","G","T","C","T","G","A","G","G","A","C","T","T","C","C","T","C","C","A","G","G","A","C","G","T","C","T","C","C","G","C","C","T","C","C","A","C","C","A","A","G","A","G","C","C","T","T","C","A","G","G","A","G","T","T","G","T","T","C","T","T","A","G","C","G","C","A","C","A","T","C","T","T","G","T","C","C","C","C","T","T","G","G","G","G","G","G","C","A","G","A","G","G","T","G","A","A","G","G","C","A","G","A","G","C","C","T","G","T","T","G","A","A","G","T","T","G","T","G","G","C","C","C","C","A","A","C","T","A","G","T","C","A","T","C","A","T","C","A","C","C","A","C","C","A","T","C","A","T"]
a = [0.00,0.00,3.43,0.09,-0.01,-0.01,0.00,0.00,-0.11,-0.01,-0.07,-0.10,-0.01,-0.11,-0.03,-0.03,-0.04,-0.03,-0.22,-0.09,0.00,0.07,-0.07,0.00,-0.17,0.00,0.16,0.00,0.00,1.47,0.53,-0.15,0.00,0.88,3.47,0.00,0.17,-0.05,-0.23,0.00,0.00,-0.07,0.00,5.02,3.61,0.00,0.00,1.11,0.00,1.59,4.15,3.87,0.68,1.25,0.00,-0.10,-0.17,0.04,2.12,-0.15,0.92,2.54,-0.01,0.00,0.00,-0.23,0.03,0.66,-0.28,0.27,-0.03,-0.47,-0.21,-0.06,0.22,0.00,0.00,-0.16,0.00,0.00,-0.02,-0.08,0.00,-0.13,-0.05,0.00,0.00,0.20,0.50,-0.01,0.00,0.00,0.09,0.05,1.66,2.18,0.00,0.25,0.12,0.00,4.33,-0.28,-0.18,0.00,-0.07,0.00,0.00,0.00,0.22,1.23,-0.22,1.51,4.34,-0.25,0.17,0.29,-0.18,0.00,0.00,2.90,-0.25,1.29,-0.15,0.00,1.96,-0.08,0.08,-0.16,0.60,0.00,-0.20,-0.33,3.53,0.07,0.04,0.00,0.00,-0.11,0.00,0.00,-0.12,4.14,2.05,0.04,-0.20,0.09,-0.15,0.33,2.92,2.03,2.39,2.60,-0.21,0.00,1.00,0.21,0.00,1.21,0.02,0.00,-0.05,-0.02,0.00,0.00,0.00,0.00,0.00,0.37,0.36,0.00,-0.19,-0.09,0.60,-0.24,0.23,0.00,0.00,0.00,0.00,0.08,0.00,-0.26,-0.11,0.00,0.00,-0.29,0.00,0.00,-0.09,0.00,0.00,-0.15,0.00,3.40,0.16,-0.19,0.00,-0.08,-0.08,0.00,0.00,-0.27,0.66,0.00,0.00,0.00,0.21,-0.01,0.00,0.00,0.56,0.04,-0.22,0.00,0.00,-0.06,0.00,4.72,-0.07,3.00,-0.24,0.00,4.85,0.01,0.23,-0.11,-0.07,-0.22,0.25,0.88,0.05,-0.15,0.00,-0.11,-0.14,0.00,1.07,1.65,-0.21,0.00,0.79,0.97,-0.02,0.01,0.00,-0.14,0.12,0.00,-0.06,-0.18,0.15,-0.06,-0.43,-0.26,-0.40,0.04,-0.13,-0.12,-0.01,0.93,-0.22,0.00,-0.03,-0.16,0.00,0.00,0.35,0.00,-0.04,-0.09,-0.19,-0.17,-0.37,-0.06,0.00,0.13,0.29,0.00,-0.07,-0.20,-0.35,-0.18,-0.39,0.50,-0.09,0.57,-0.25,0.00,-0.24,-0.06,0.57,0.19,0.00,0.02,0.00,-0.24,0.18,-0.14,-0.69,0.73,0.26,0.02,-0.27,-0.04,-0.12,0.10,-0.02,-0.56,-0.38,-0.17,-0.06,-0.23,-0.49,-0.05,0.00,-0.12,0.00,-0.26,0.05,-0.20,-0.20,0.00,0.00,0.03,0.14,-0.15,0.00,0.01,0.00,-0.09,-0.13,-0.40,0.49,0.08,0.34,-0.25,0.08,0.00,0.00,0.18,-0.37,0.33,-0.11,-0.45,-0.24,-0.18,-0.06,-0.20,-0.19,0.10,0.00,0.00,-0.55,-0.05,0.00,0.00,0.00,0.00,0.00,0.00,-0.01,0.00,0.00,-0.01,0.00,-0.01,0.00,0.00,0.00,-0.04,0.00,-0.01,-0.09,0.00,-0.07]
c = [0.00,-0.02,-0.02,-0.02,-0.11,-0.01,-0.01,-0.04,0.00,-0.05,0.00,0.00,-0.04,0.00,-0.01,-0.05,0.00,0.01,-0.02,0.00,-0.11,-0.14,0.00,-0.07,-0.05,0.04,-0.22,-0.01,0.00,-0.05,0.00,0.00,-0.17,0.03,0.89,-0.08,0.39,0.00,0.00,-0.18,-0.12,0.00,-0.10,-0.19,-0.05,-0.06,0.92,-0.01,-0.13,0.68,0.00,0.00,0.46,-0.10,-0.21,0.00,-0.18,0.00,4.01,0.00,0.03,0.02,0.04,0.01,0.28,-0.04,0.00,3.63,0.44,0.04,0.00,0.00,0.00,0.36,-0.01,-0.13,-0.18,0.00,-0.07,-0.07,0.02,-0.02,0.49,-0.01,0.05,-0.09,1.77,0.06,3.40,0.14,-0.06,-0.06,-0.05,0.22,0.00,0.00,0.10,0.20,0.14,0.66,6.65,3.83,0.02,0.53,0.80,0.09,-0.22,0.28,0.00,3.14,0.00,-0.02,-0.01,-0.02,-0.04,0.08,-0.07,-0.24,-0.07,-0.04,-0.23,0.44,-0.02,1.42,0.00,0.08,0.23,-0.09,0.07,-0.29,0.00,-0.02,-0.02,0.00,0.00,0.07,-0.13,0.00,-0.13,0.18,-0.05,0.00,0.00,-0.55,0.29,0.00,0.00,0.00,2.24,0.09,1.27,1.73,0.00,0.01,0.35,0.00,3.65,-0.11,0.00,-0.01,0.00,0.00,0.64,0.02,0.00,1.81,0.51,0.03,-0.01,-0.16,-0.16,-0.11,-0.09,-0.06,-0.02,-0.25,0.07,-0.06,-0.06,-0.03,0.33,-0.16,-0.02,-0.15,1.97,0.05,5.31,0.86,0.00,-0.05,-0.09,0.09,-0.11,0.92,0.27,0.36,-0.05,0.58,1.64,5.02,0.02,0.47,1.73,-0.05,0.08,-0.04,-0.01,1.28,-0.18,-0.07,0.02,0.00,0.00,-0.06,-0.23,0.00,-0.09,0.31,0.00,0.00,0.30,0.86,-0.07,0.05,0.63,-0.02,0.29,-0.08,0.23,0.00,0.28,-0.07,-0.01,-0.04,-0.01,-0.11,0.00,0.84,0.33,0.00,0.00,0.51,0.00,0.00,-0.02,-0.06,0.00,-0.13,0.00,-0.10,-0.04,0.00,-0.31,0.00,0.00,0.03,0.00,0.00,-0.19,0.00,0.00,-0.12,0.00,0.00,0.05,-0.05,0.00,-0.01,-0.06,0.00,0.00,-0.24,-0.12,0.00,-0.01,-0.12,-0.01,0.22,0.23,-0.23,-0.39,0.06,-0.30,-0.05,0.00,-0.14,-0.28,-0.03,2.11,0.00,-0.04,0.00,-0.12,0.00,-0.04,-0.27,0.00,-0.30,0.95,0.13,-0.19,0.00,0.00,0.00,0.00,-0.19,2.03,-0.02,0.00,-0.08,-0.02,-0.05,-0.07,0.00,-0.10,-0.05,-0.02,-0.17,0.08,-0.43,-0.06,-0.08,-0.14,-0.05,-0.09,0.00,-0.06,0.00,-0.09,-0.02,0.00,0.00,-0.24,-0.18,-0.35,0.00,-0.03,-0.03,-0.11,-0.03,-0.09,-0.02,-0.02,-0.18,-0.01,-0.03,0.00,0.00,0.00,0.00,-0.01,-0.14,0.00,0.00,-0.05,0.00,0.00,0.00,0.00,0.00,0.00,-0.01,-0.01,0.00,-0.02,0.00,0.00,-0.01,0.00,0.00,-0.04,-0.09,0.00,-0.01,0.00]
t = [0.00,0.00,-0.12,-0.01,0.00,-0.01,-0.03,-0.03,-0.05,0.00,-0.02,-0.04,0.00,-0.05,0.00,-0.04,-0.42,0.00,0.00,-0.13,-0.35,-0.29,-0.29,-0.29,-0.24,0.00,0.00,-0.27,0.15,0.06,-0.29,0.09,-0.15,0.00,0.00,0.92,0.00,-0.21,0.35,-0.27,0.43,-0.16,-0.23,0.00,-0.03,-0.45,1.78,0.18,0.24,0.00,-0.18,0.39,0.00,0.11,-0.22,0.47,0.00,-0.06,0.00,-0.16,0.76,1.96,-0.06,-0.26,0.45,-0.15,-0.13,0.00,0.44,0.00,0.15,-0.10,0.06,-0.44,-0.10,0.31,0.00,-0.03,-0.19,0.04,0.06,0.30,1.24,0.00,0.04,-0.09,-0.15,0.01,0.00,0.11,0.19,-0.02,-0.09,0.51,-0.04,-0.16,-0.22,0.00,-0.09,0.90,0.00,0.00,-0.20,1.68,0.05,-0.21,1.32,-0.04,0.07,0.00,-0.30,0.26,0.04,-0.28,0.66,1.22,-0.02,-0.40,0.32,-0.02,0.00,0.00,0.60,0.36,-0.23,-0.26,1.53,1.23,1.81,0.21,-0.13,-0.38,0.16,2.87,-0.34,1.18,0.55,-0.33,-0.62,1.91,2.30,-0.09,1.20,0.00,0.00,0.10,0.03,1.99,0.00,-0.01,0.00,0.14,-0.33,0.37,0.00,-0.10,1.48,3.55,-0.06,-0.28,2.22,-0.17,-0.43,1.72,-0.10,-0.21,0.83,0.16,-0.05,1.25,-0.21,-0.03,0.00,-0.01,0.92,0.26,0.07,1.22,-0.03,-0.18,0.45,0.00,0.10,0.71,-0.07,0.00,-0.03,2.09,0.21,1.26,0.60,-0.06,0.09,0.00,2.66,-0.23,0.90,0.05,-0.21,0.22,-0.20,0.01,0.00,-0.15,-0.96,0.20,0.21,-0.17,1.08,0.32,0.05,1.05,-0.09,1.59,-0.41,0.47,0.90,0.00,0.02,-0.45,0.01,0.05,0.32,0.00,0.00,-0.07,0.00,-0.06,0.00,1.99,0.00,-0.22,1.28,1.61,-0.01,11.19,2.03,0.00,0.00,0.64,3.95,0.00,-0.06,-0.35,0.71,-0.02,-0.12,4.09,-0.28,0.14,0.00,-0.14,0.00,0.18,0.08,0.18,4.29,2.29,0.00,-0.17,-0.08,-0.04,-0.12,-0.07,-0.40,1.27,-0.06,-0.17,0.29,2.30,-0.02,0.00,0.00,-0.08,1.59,1.17,-0.03,4.95,-0.08,0.00,0.00,-0.03,0.00,0.00,0.06,0.00,0.00,0.11,-0.01,7.15,1.29,0.20,2.12,-0.29,5.07,0.00,0.35,0.00,0.00,-0.02,0.00,0.09,0.01,0.11,0.05,0.00,0.00,0.02,0.15,0.06,0.31,-0.15,-0.06,4.90,-0.13,0.75,-0.31,-0.46,0.03,0.00,-0.15,-0.84,-0.47,-0.37,-0.09,-0.10,0.10,-0.24,-0.12,1.06,-0.14,-0.01,0.00,-0.03,0.00,0.00,-0.08,1.57,-0.16,1.16,0.00,0.00,0.00,0.00,-0.06,-0.02,-0.13,-0.22,-0.23,1.42,-0.24,-0.03,-0.04,0.00,0.01,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,-0.01,0.00,0.00,-0.12,-0.01,-0.01,-0.03,0.00,-0.01,-0.10,0.00]
g = [-0.01,0.00,0.00,0.00,-0.10,0.00,0.00,0.01,0.00,0.00,0.00,0.00,-0.02,0.00,-0.02,0.00,0.00,-0.04,-0.05,0.00,-0.26,0.00,-0.02,-0.11,0.00,0.12,0.00,-0.06,-0.08,0.00,-0.07,-0.06,-0.11,0.25,-0.02,-0.08,-0.02,0.00,-0.04,-0.18,0.43,-0.05,0.38,-0.12,0.00,0.20,-0.27,0.00,-0.01,-0.02,0.00,-0.08,0.00,0.00,0.06,-0.12,0.08,0.11,0.32,0.00,0.00,0.00,0.00,0.35,0.10,0.00,-0.02,0.01,0.00,-0.02,-0.05,-0.11,-0.06,0.00,0.00,-0.02,-0.07,-0.04,0.16,-0.13,0.00,0.00,-0.14,-0.03,0.00,0.51,0.25,0.00,0.15,0.00,0.98,-0.09,0.00,0.00,0.13,0.02,0.21,-0.11,0.00,0.18,0.12,0.06,0.00,0.12,0.00,0.84,0.30,-0.17,0.04,0.47,0.01,0.00,0.00,0.00,0.00,0.00,0.00,0.40,-0.24,0.00,0.15,-0.10,0.00,-0.57,0.00,0.00,0.00,0.00,0.00,-0.08,1.87,0.00,0.00,0.06,-0.01,0.35,0.34,2.82,0.82,0.16,0.00,0.00,-0.03,-0.06,3.33,-0.05,-0.01,-0.03,1.85,0.00,-0.22,0.00,0.11,-0.17,0.25,0.10,1.00,0.00,-0.06,0.65,-0.05,0.53,0.30,-0.26,-0.29,0.07,-0.35,0.00,0.00,-0.02,0.00,0.00,0.50,0.00,0.00,0.04,2.15,-0.23,-0.35,0.00,-0.08,-0.37,0.00,-0.33,1.55,-0.17,-0.06,0.10,0.00,-0.35,-0.44,0.00,0.35,-0.01,0.00,0.00,0.05,0.00,0.00,0.01,0.00,0.00,-0.06,-0.08,0.10,2.55,0.00,0.00,-0.20,-0.42,0.00,-0.03,-0.11,0.45,0.46,-0.01,-0.27,-0.17,0.05,-0.06,0.00,-0.18,0.00,-0.10,-0.08,0.00,-0.39,0.00,-0.48,0.16,5.83,0.00,0.25,0.00,0.00,-0.56,1.15,6.54,3.02,0.06,-0.12,-0.40,-0.12,-0.07,4.06,0.00,0.00,-0.08,2.46,0.00,-0.21,-0.07,-0.19,-0.02,0.20,0.00,0.52,-0.22,-0.04,-0.03,-0.05,-0.13,-0.05,-0.02,0.12,-0.05,0.00,0.82,0.00,-0.11,-0.10,-0.55,-0.19,-0.04,-0.28,0.00,0.00,-0.02,0.00,-0.13,-0.16,0.00,-0.34,-0.13,0.21,-0.24,-0.07,-0.21,0.00,-0.06,0.00,-0.02,0.17,0.00,-0.41,-0.26,0.22,-0.28,-0.18,0.00,-0.14,-0.06,0.06,0.05,-0.03,4.27,-0.23,0.00,0.00,0.00,0.00,0.00,0.00,0.21,-0.37,0.00,-0.12,0.00,0.00,-0.02,0.00,0.96,-0.32,0.00,0.00,-0.07,-0.05,0.00,-0.25,0.00,-0.04,-0.15,0.66,0.00,-0.05,-0.02,0.00,-0.21,0.39,0.00,-0.07,-0.11,0.00,-0.18,0.00,0.00,1.30,-0.06,-0.10,-0.02,0.69,-0.05,-0.03,-0.03,-0.08,0.00,-0.02,0.00,0.00,-0.02,0.00,-0.01,-0.10,0.00,-0.16,0.00,-0.01,-0.08,-0.03,0.00,-0.04,-0.69,0.00,-0.01,-0.03]

trans = [[0.0,0.0] for x in range(len(dna)/3)] #non silent, silent

table = unambiguous_dna_by_name["Bacterial"].forward_table
back_table = {}
for codon, amino in table.iteritems() :
    try :
        back_table[amino].append(codon)
    except KeyError :
        back_table[amino] = [codon]

steps = 0
for pos in range(len(dna),step=3):
    wt = table["".join(dna[pos:pos+3])]
    #A's
    for x in range(3):
        if a[pos+x]>0:
            try:
                if x==0:
                    if table['A'+dna[pos+1]+dna[pos+2]]==wt:
                        trans[steps][1]+=a[pos+x] #was silent
                    else:
                        trans[steps][0]+=a[pos+x] #was not silent
                elif x==1:
                    if table[dna[pos] + 'A' + dna[pos+2]]==wt:
                        trans[steps][1]+=a[pos+x] #was silent
                    else:
                        trans[steps][0]+=a[pos+x] #was not silent
                else:
                    if table[dna[pos] + dna[pos+1] + 'A'] == wt:
                        trans[steps][1]+=a[pos+x] #was silent
                    else:
                        trans[steps][0]+=a[pos+x] #was not silent
            except: #fails if codon does not exist. I count that as not silent
                trans[steps][0]+=a[pos+x] #was not silent
    #T's
    for x in range(3):
        if t[pos+x]>0:
            try:
                if x==0:
                    if table['T'+dna[pos+1]+dna[pos+2]]==wt:
                        trans[steps][1]+=t[pos+x] #wts silent
                    else:
                        trans[steps][0]+=t[pos+x] #wts not silent
                elif x==1:
                    if table[dna[pos] + 'T' + dna[pos+2]]==wt:
                        trans[steps][1]+=t[pos+x] #wts silent
                    else:
                        trans[steps][0]+=t[pos+x] #wts not silent
                else:
                    if table[dna[pos] + dna[pos+1] + 'T'] == wt:
                        trans[steps][1]+=t[pos+x] #wts silent
                    else:
                        trans[steps][0]+=t[pos+x] #wts not silent
            except: #ftils if codon does not exist. I count thtt ts not silent
                trans[steps][0]+=t[pos+x] #wts not silent
    #C's
    for x in range(3):
        if t[pos+x]>0:
            try:
                if x==0:
                    if table['C'+dna[pos+1]+dna[pos+2]]==wt:
                        trans[steps][1]+=t[pos+x] #wts silent
                    else:
                        trans[steps][0]+=t[pos+x] #wts not silent
                elif x==1:
                    if table[dna[pos] + 'C' + dna[pos+2]]==wt:
                        trans[steps][1]+=t[pos+x] #wts silent
                    else:
                        trans[steps][0]+=t[pos+x] #wts not silent
                else:
                    if table[dna[pos] + dna[pos+1] + 'C'] == wt:
                        trans[steps][1]+=t[pos+x] #wts silent
                    else:
                        trans[steps][0]+=t[pos+x] #wts not silent
            except: #ftils if codon does not exist. I count thtt ts not silent
                trans[steps][0]+=t[pos+x] #wts not silent
    #G's
    for x in range(3):
        if g[pos+x]>0:
            try:
                if x==0:
                    if table['G'+dna[pos+1]+dna[pos+2]]==wt:
                        trans[steps][1]+=g[pos+x] #wgs silent
                    else:
                        trans[steps][0]+=g[pos+x] #wgs not silent
                elif x==1:
                    if table[dna[pos] + 'G' + dna[pos+2]]==wt:
                        trans[steps][1]+=g[pos+x] #wgs silent
                    else:
                        trans[steps][0]+=g[pos+x] #wgs not silent
                else:
                    if table[dna[pos] + dna[pos+1] + 'G'] == wt:
                        trans[steps][1]+=g[pos+x] #wgs silent
                    else:
                        trans[steps][0]+=g[pos+x] #wgs not silent
            except: #fgils if codon does not exist. I count thgt gs not silent
                trans[steps][0]+=g[pos+x] #wgs not silent
    steps+=1

print("\t".join([str(x[0]) for x in trans]))
print("\t".join([str(x[1]) for x in trans]))